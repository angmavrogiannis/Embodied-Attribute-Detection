The TOTE model stands for Test Operate Test Exit, where Test is responsible for condition checking through visual observation from the environment, Operate includes tasks or other nested TOTE units that aim to satisfy the Test condition, and Exit signifies the time when the Test is satisfied. If we consider hammering a nail as an example task, it has a test module which continuously checks whether the head of the nail sticks up or not. If it does not stick up the task is complete and the TOTE unit exits. If it sticks up, the Operate module consists of two nested TOTE units, one for lifting the hammer if the hammer is down, and one for striking the nail with the hammer when the hammer is up. This is formalized in python pseudocode below:

# outer TOTE unit - Test
while sticks_up(nail_head):
    # outer TOTE unit - Operate

    # inner TOTE unit #1 - Test
    while is_down(hammer):
        # inner TOTE unit #1 - Operate
        lift(hammer)
    # inner TOTE unit #1 - Exit

    # inner TOTE unit #2 - Test
    while is_up(hammer):
        # inner TOTE unit #2 - Operate
        strike(nail)
    # inner TOTE unit #2 - Exit

# outer TOTE unit - Exit

Using this reasoning decompose the following task in python pseudocode using TOTE model(s):
“Carry a first-aid kit to another soldier who is moving”
